const io = import "Std.Io"

explicit module Calculator = 
	add :: f32 -> f32 -> f32
	sub :: f32 -> f32 -> f32
	mul :: f32 -> f32 -> f32
	div :: f32 -> f32 -> f32
end

module Calculator =
	pub fun add x y = x+y end
	pub fun sub x y = x-y end
	pub fun mul x y = x*y end
	pub fun div x y = x/y end
end

** share module in other module
explicit module AdvanceCalculator =
	pow :: f32 -> f32	
	mod :: f32 -> f32 -> f32
end

module AdvanceCalculator = 
	share Calculator
	pub fun pow x = x*x end
	pub fun mod x y = x%y end
end

explicit module MyNum = type T end

** type in module
module MyNum = 
	type T = 
		value: i32
	end
end

fun main = 
	const calculator = Calculator
	io.println("add: {}", calculator.add(2,3));
	io.println("sub: {}", calculator.sub(2,3));
	io.println("mul: {}", calculator.mul(2,3));
	io.println("div: {}", calculator.div(2,3));

	const advance_calculator = AdvanceCalculator
	io.println("add: {}", advance_calculator.add(2,3));
	io.println("sub: {}", advance_calculator.sub(2,3));
	io.println("mul: {}", advance_calculator.mul(2,3));
	io.println("div: {}", advance_calculator.div(2,3));
	io.println("pow: {}", advance_calculator.pow(2));
	io.println("mod: {}", calculator.mod(2,3));
end
